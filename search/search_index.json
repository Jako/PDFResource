{
    "docs": [
        {
            "location": "/", 
            "text": "PDFResource\n\n\nPDFResource is a MODX Revolution extra that converts resources to PDF files\nusing \nmPDF\n.\n\n\nRequirements\n\n\n\n\nMODX Revolution 2.4+\n\n\nPHP v5.4+\n\n\n\n\nFeatures\n\n\n\n\nCreate a static PDF file of a MODX resource with \nmPDF\n during saving or on viewing the resource.\n\n\nCreate a PDF file of a MODX resource on the fly with \nmPDF\n.\n\n\nThe options for the generated PDF could be set in MODX system settings and on resource base.", 
            "title": "Description"
        }, 
        {
            "location": "/#pdfresource", 
            "text": "PDFResource is a MODX Revolution extra that converts resources to PDF files\nusing  mPDF .", 
            "title": "PDFResource"
        }, 
        {
            "location": "/#requirements", 
            "text": "MODX Revolution 2.4+  PHP v5.4+", 
            "title": "Requirements"
        }, 
        {
            "location": "/#features", 
            "text": "Create a static PDF file of a MODX resource with  mPDF  during saving or on viewing the resource.  Create a PDF file of a MODX resource on the fly with  mPDF .  The options for the generated PDF could be set in MODX system settings and on resource base.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Install from MODX Extras\n\n\nSearch for PDFResource in the Package Manager of your MODX installation and\ninstall it in there.\n\n\nManual installation\n\n\nIf you can't access the MODX Extras Repository in your MODX installation, you\ncan manually install PDFResource.\n\n\n\n\nDownload the transport package from \nMODX Extras\n (or one of the pre built transport packages in \n_packages\n)\n\n\nUpload the zip file to your MODX installation's \ncore/packages\n folder or upload it manually in the MODX Package Manager.\n\n\nIn the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.\n\n\nPDFResource should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.\n\n\n\n\nBuild it from source\n\n\nTo build and install the package from source you could use \nGit Package\nManagement\n. The GitHub\nrepository of PDFResource contains a\n\nconfig.json\n\nto build that package locally. Use this option, if you want to debug PDFResource\nand/or contribute bugfixes and enhancements.\n\n\nAfter downloading the github repository, you have to change into the\n\ncore/components/pdfresource\n folder and install mpdf with composer by invoking\n\ncomposer install\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-from-modx-extras", 
            "text": "Search for PDFResource in the Package Manager of your MODX installation and\ninstall it in there.", 
            "title": "Install from MODX Extras"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "If you can't access the MODX Extras Repository in your MODX installation, you\ncan manually install PDFResource.   Download the transport package from  MODX Extras  (or one of the pre built transport packages in  _packages )  Upload the zip file to your MODX installation's  core/packages  folder or upload it manually in the MODX Package Manager.  In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.  PDFResource should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.", 
            "title": "Manual installation"
        }, 
        {
            "location": "/installation/#build-it-from-source", 
            "text": "To build and install the package from source you could use  Git Package\nManagement . The GitHub\nrepository of PDFResource contains a config.json \nto build that package locally. Use this option, if you want to debug PDFResource\nand/or contribute bugfixes and enhancements.  After downloading the github repository, you have to change into the core/components/pdfresource  folder and install mpdf with composer by invoking composer install .", 
            "title": "Build it from source"
        }, 
        {
            "location": "/usage/", 
            "text": "Enable the PDF generation\n\n\nPDFResource\n works out of the box and creates PDF files from all resources,\nthat have the template variable \ncreate_pdf\n assigned (the template variable\nname could be changed in MODX system settings). The generated PDF files are\nsaved with the current alias path to \n{assets_url}/pdf/\n\n\nSo after the installation you only have to assign the template variable\n\ncreate_pdf\n to the templates of the resources that should be converted to PDF\nand check that template variable in the resource (checked by default).\n\n\nPDF generation on the fly\n\n\nTo generate PDF files on the fly with \nPDFResource\n you have to assign the\ntemplate variable \nlive_pdf\n to a template (the template variable name could be\nchanged in MODX system settings) and check this template variable on a resource.\nAfter this, the resource will be rendered as PDF file in the browser. The file\ncould be saved with the current alias.\n\n\n\n\nCaution\n\n\nThis option should only be activated, if the content of the resource is dynamically changed. Generating the PDF is a quite resource consuming process and it could take some time.\n\n\n\n\nPDF options\n\n\nBy default the PDF content and the CSS code for the PDF could be changed with\nthe chunks \ntplPDF\n and \ntplCSS\n. Some other PDF options (pagesize, margins\netc.) could be set in MODX system setting.\n\n\nThe following MODX system settings are available in the namespace \npdfresource\n:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npdfresource.mode\n\n\nmPDF mode, see \nmode parameter\n and \nchoosing a configuration\n in the mPDF documentation for possible values.\n\n\n-\n\n\n\n\n\n\npdfresource.format\n\n\nPDF page size. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).\n\n\nA4\n\n\n\n\n\n\npdfresource.defaultFontSize\n\n\nDefault font size of the generated PDF\n\n\n0\n\n\n\n\n\n\npdfresource.defaultFont\n\n\nDefault font of the generated PDF\n\n\n-\n\n\n\n\n\n\npdfresource.mgl\n\n\nBottom margin of the generated PDF\n\n\n15\n\n\n\n\n\n\npdfresource.mgr\n\n\nRight margin of the generated PDF\n\n\n15\n\n\n\n\n\n\npdfresource.mgt\n\n\nTop margin of the generated PDF\n\n\n16\n\n\n\n\n\n\npdfresource.mgb\n\n\nBottom margin of the generated PDF\n\n\n16\n\n\n\n\n\n\npdfresource.mgh\n\n\nHeader margin of the generated PDF\n\n\n9\n\n\n\n\n\n\npdfresource.mgf\n\n\nFooter margin of the generated PDF\n\n\n9\n\n\n\n\n\n\npdfresource.orientation\n\n\nPDF orientation. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).\n\n\nP\n\n\n\n\n\n\npdfresource.pdfTpl\n\n\nTemplate chunk for the PDF content. You could use @FILE binding to retreive the chunk from a file.\n\n\ntplPDF\n\n\n\n\n\n\npdfresource.cssTpl\n\n\nTemplate chunk for the PDF style. You could use @FILE binding to retreive the chunk from a file.\n\n\ntplCSS\n\n\n\n\n\n\npdfresource.pdfTv\n\n\nName ot the template variable that activates the PDF generation.\n\n\ncreate_pdf\n\n\n\n\n\n\npdfresource.pdfTvLive\n\n\nName of the template variable that activates the on the fly PDF generation.\n\n\nlive_pdf\n\n\n\n\n\n\npdfresource.pdfTvOptions\n\n\nName of the template variable that change the options of the generated PDF. The content of this template variable has to contain a JSON encoded object of the options you want to change.\n\n\npdf_options\n\n\n\n\n\n\npdfresource.processTVs\n\n\nProcess template variables during PDF generation.\n\n\nYes\n\n\n\n\n\n\npdfresource.tvPrefix\n\n\nTemplate variable prefix in the template chunk.\n\n\n.tv\n\n\n\n\n\n\npdfresource.customFonts\n\n\nJSON encoded object of custom fonts, see \nCustom fonts\n for an example. Please copy the font files to \n{core_path}components/pdfresource/vendor/mpdf/mpdf/ttfonts/\n.\n\n\n-\n\n\n\n\n\n\npdfresource.generateOnPrerender\n\n\nGenerate not existing PDF files during OnWebPagePrerender. This option is useful, if you have installed PDFResource in an existing MODX installation. You don't have to save all resources that could generate a PDF file then.\n\n\nfalse\n\n\n\n\n\n\npdfresource.permissions\n\n\nJSON encoded array of permissions granted to the end-user of the PDF file. See \npermissions\n in the mPDF documentation for possible values.\n\n\n[]\n\n\n\n\n\n\npdfresource.userPassword\n\n\nPassword required to open the generated PDF.\n\n\n-\n\n\n\n\n\n\npdfresource.ownerPassword\n\n\nPassword for full access and permissions to the generated PDF.\n\n\n-\n\n\n\n\n\n\npdfresource.mPDFMethods\n\n\nJSON encoded array of callable mPDF method names.\n\n\n[]\n\n\n\n\n\n\n\n\nThe following MODX system settings have to be created to use them:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npdfresource.author\n\n\nAuthor of the PDF file\n\n\nsite_name\n system setting\n\n\n\n\n\n\npdfresource.creator\n\n\nCreator of the PDF file\n\n\nsite_url\n system setting + \npowered by PDFResource/mPDF\n\n\n\n\n\n\n\n\nResource based PDF options\n\n\nAll these options could be modified on resource base in a template variable\n\npdf_options\n (the template variable name could be changed in MODX system\nsettings). This template variable has to contain an JSON encoded object of\noptions without the prefix \npdfresource.\n.\n\n\nExample\n\n\n{\n    \nformat\n: \nA4-L\n,\n    \nmgl\n: 20,\n    \nmgr\n: 20\n}\n\n\n\nPDF content template\n\n\nThe content of the PDF is filled with the chunk defined by \npdfresource.pdfTpl\n\nMODX system setting (or on resource base by the \npdf_options\n template\nvariable). By default PDFResource uses the \ntplPDF\n chunk. You could fill this\nchunk like a normal MODX template with resource placeholders, snippet calls etc.\nSince the PDF is not created on the fly, the content is fixed after saving the\nresource.\n\n\nPDF styles template\n\n\nThe style of the PDF is set with the chunk defined by \npdfresource.cssTpl\n MODX\nsystem setting (or on resource base by the \npdf_options\n template variable). By\ndefault PDFResource uses the \ntplCSS\n chunk. There are some limitations with\nmPDF and CSS (i.e. \nposition: absolute\n works only with elements on root level).\n\n\nCustom fonts\n\n\nTo use custom fonts in your PDF files, you have to add them as JSON encoded\nobject in the MODX system setting \npdfresource.customFonts\n. See\n\nFonts\n\nin the mPDF documentation a the full description.\n\n\nExample\n\n\n{\n  \nfrutiger\n: {\n    \nR\n: \nFrutiger-Normal.ttf\n,\n    \nI\n: \nFrutigerObl-Normal.ttf\n\n  }\n}\n\n\n\nPlease copy the font files to\n\n{core_path}components/pdfresource/vendor/mpdf/mpdf/ttfonts/\n.\n\n\nPDF permissions\n\n\nThe generated PDF could be encrypted to set user permissions. An user password\nto open the file and an owner password to bypass and/or change the permission\nrestrictions could be set. The PDF encryption is enabled if the user or the\nowner password is set.\n\n\nA list of permissions could be found at\n\npermissions\n\nin the mPDF documentation. By default all permissions are denied if the file is\nencrypted.\n\n\nThe following example JSON will grant copying and printing (low-res) to the\nend-user of the generated PDF.\n\n\nExample\n\n\n[\ncopy\n, \nprint\n]\n\n\n\nOther mPDF options\n\n\nIf you want to set other mPDF options to modify the PDF file creation, you could\ncall the \nmPDF class\nmethods\n with\ncallbacks.\n\n\nTo use the callbacs, you first have to fill the MODX system setting\n\npdfresource.mPDFMethods\n with an JSON encoded array of called method names.\nAfter that, you have to fill the according MODX system setting or (on resource\nbase) an according key in \npdf_options\n template variable. The method parameters\nhave to be set by an JSON encoded array.\n\n\nExample\n\n\nTo call the mPDF method \nSetHTMLFooter\n you have to set the MODX system setting\n\npdfresource.mPDFMethods\n to\n\n\n[\nSetHTMLFooter\n]\n\n\n\nAfter that you have to create a MODX system setting \npdfresource.SetHTMLFooter\n\nand fill it with\n\n\n[\ndiv align='right' style='font-size: 8pt;'\n{PAGENO}\n/div\ndiv align='center' style='font-size: 8pt; font-style: italic;'\nhr\nMy footer text.\n/div\n]\n\n\n\nor fill the \nPDF Options\n template variable of a resource with\n\n\n{\n  \nSetHTMLFooter\n: [\n    \ndiv align='right' style='font-size: 8pt;'\n{PAGENO}\n/div\ndiv align='center' style='font-size: 8pt; font-style: italic;'\nhr\nMy footer text.\n/div\n\n  ]\n}\n\n\n\nLinking to a generated PDF\n\n\nAll generated static PDF files are saved with the aliaspath of the generating\nresource. If you want to create a link to that PDF file, you could use the\nfollowing code:\n\n\na href=\n[[*id:pdfresourcelink]]\nPDF\n/a", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#enable-the-pdf-generation", 
            "text": "PDFResource  works out of the box and creates PDF files from all resources,\nthat have the template variable  create_pdf  assigned (the template variable\nname could be changed in MODX system settings). The generated PDF files are\nsaved with the current alias path to  {assets_url}/pdf/  So after the installation you only have to assign the template variable create_pdf  to the templates of the resources that should be converted to PDF\nand check that template variable in the resource (checked by default).", 
            "title": "Enable the PDF generation"
        }, 
        {
            "location": "/usage/#pdf-generation-on-the-fly", 
            "text": "To generate PDF files on the fly with  PDFResource  you have to assign the\ntemplate variable  live_pdf  to a template (the template variable name could be\nchanged in MODX system settings) and check this template variable on a resource.\nAfter this, the resource will be rendered as PDF file in the browser. The file\ncould be saved with the current alias.   Caution  This option should only be activated, if the content of the resource is dynamically changed. Generating the PDF is a quite resource consuming process and it could take some time.", 
            "title": "PDF generation on the fly"
        }, 
        {
            "location": "/usage/#pdf-options", 
            "text": "By default the PDF content and the CSS code for the PDF could be changed with\nthe chunks  tplPDF  and  tplCSS . Some other PDF options (pagesize, margins\netc.) could be set in MODX system setting.  The following MODX system settings are available in the namespace  pdfresource :     Key  Description  Default      pdfresource.mode  mPDF mode, see  mode parameter  and  choosing a configuration  in the mPDF documentation for possible values.  -    pdfresource.format  PDF page size. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).  A4    pdfresource.defaultFontSize  Default font size of the generated PDF  0    pdfresource.defaultFont  Default font of the generated PDF  -    pdfresource.mgl  Bottom margin of the generated PDF  15    pdfresource.mgr  Right margin of the generated PDF  15    pdfresource.mgt  Top margin of the generated PDF  16    pdfresource.mgb  Bottom margin of the generated PDF  16    pdfresource.mgh  Header margin of the generated PDF  9    pdfresource.mgf  Footer margin of the generated PDF  9    pdfresource.orientation  PDF orientation. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).  P    pdfresource.pdfTpl  Template chunk for the PDF content. You could use @FILE binding to retreive the chunk from a file.  tplPDF    pdfresource.cssTpl  Template chunk for the PDF style. You could use @FILE binding to retreive the chunk from a file.  tplCSS    pdfresource.pdfTv  Name ot the template variable that activates the PDF generation.  create_pdf    pdfresource.pdfTvLive  Name of the template variable that activates the on the fly PDF generation.  live_pdf    pdfresource.pdfTvOptions  Name of the template variable that change the options of the generated PDF. The content of this template variable has to contain a JSON encoded object of the options you want to change.  pdf_options    pdfresource.processTVs  Process template variables during PDF generation.  Yes    pdfresource.tvPrefix  Template variable prefix in the template chunk.  .tv    pdfresource.customFonts  JSON encoded object of custom fonts, see  Custom fonts  for an example. Please copy the font files to  {core_path}components/pdfresource/vendor/mpdf/mpdf/ttfonts/ .  -    pdfresource.generateOnPrerender  Generate not existing PDF files during OnWebPagePrerender. This option is useful, if you have installed PDFResource in an existing MODX installation. You don't have to save all resources that could generate a PDF file then.  false    pdfresource.permissions  JSON encoded array of permissions granted to the end-user of the PDF file. See  permissions  in the mPDF documentation for possible values.  []    pdfresource.userPassword  Password required to open the generated PDF.  -    pdfresource.ownerPassword  Password for full access and permissions to the generated PDF.  -    pdfresource.mPDFMethods  JSON encoded array of callable mPDF method names.  []     The following MODX system settings have to be created to use them:     Key  Description  Default      pdfresource.author  Author of the PDF file  site_name  system setting    pdfresource.creator  Creator of the PDF file  site_url  system setting +  powered by PDFResource/mPDF", 
            "title": "PDF options"
        }, 
        {
            "location": "/usage/#resource-based-pdf-options", 
            "text": "All these options could be modified on resource base in a template variable pdf_options  (the template variable name could be changed in MODX system\nsettings). This template variable has to contain an JSON encoded object of\noptions without the prefix  pdfresource. .", 
            "title": "Resource based PDF options"
        }, 
        {
            "location": "/usage/#example", 
            "text": "{\n     format :  A4-L ,\n     mgl : 20,\n     mgr : 20\n}", 
            "title": "Example"
        }, 
        {
            "location": "/usage/#pdf-content-template", 
            "text": "The content of the PDF is filled with the chunk defined by  pdfresource.pdfTpl \nMODX system setting (or on resource base by the  pdf_options  template\nvariable). By default PDFResource uses the  tplPDF  chunk. You could fill this\nchunk like a normal MODX template with resource placeholders, snippet calls etc.\nSince the PDF is not created on the fly, the content is fixed after saving the\nresource.", 
            "title": "PDF content template"
        }, 
        {
            "location": "/usage/#pdf-styles-template", 
            "text": "The style of the PDF is set with the chunk defined by  pdfresource.cssTpl  MODX\nsystem setting (or on resource base by the  pdf_options  template variable). By\ndefault PDFResource uses the  tplCSS  chunk. There are some limitations with\nmPDF and CSS (i.e.  position: absolute  works only with elements on root level).", 
            "title": "PDF styles template"
        }, 
        {
            "location": "/usage/#custom-fonts", 
            "text": "To use custom fonts in your PDF files, you have to add them as JSON encoded\nobject in the MODX system setting  pdfresource.customFonts . See Fonts \nin the mPDF documentation a the full description.", 
            "title": "Custom fonts"
        }, 
        {
            "location": "/usage/#example_1", 
            "text": "{\n   frutiger : {\n     R :  Frutiger-Normal.ttf ,\n     I :  FrutigerObl-Normal.ttf \n  }\n}  Please copy the font files to {core_path}components/pdfresource/vendor/mpdf/mpdf/ttfonts/ .", 
            "title": "Example"
        }, 
        {
            "location": "/usage/#pdf-permissions", 
            "text": "The generated PDF could be encrypted to set user permissions. An user password\nto open the file and an owner password to bypass and/or change the permission\nrestrictions could be set. The PDF encryption is enabled if the user or the\nowner password is set.  A list of permissions could be found at permissions \nin the mPDF documentation. By default all permissions are denied if the file is\nencrypted.  The following example JSON will grant copying and printing (low-res) to the\nend-user of the generated PDF.", 
            "title": "PDF permissions"
        }, 
        {
            "location": "/usage/#example_2", 
            "text": "[ copy ,  print ]", 
            "title": "Example"
        }, 
        {
            "location": "/usage/#other-mpdf-options", 
            "text": "If you want to set other mPDF options to modify the PDF file creation, you could\ncall the  mPDF class\nmethods  with\ncallbacks.  To use the callbacs, you first have to fill the MODX system setting pdfresource.mPDFMethods  with an JSON encoded array of called method names.\nAfter that, you have to fill the according MODX system setting or (on resource\nbase) an according key in  pdf_options  template variable. The method parameters\nhave to be set by an JSON encoded array.", 
            "title": "Other mPDF options"
        }, 
        {
            "location": "/usage/#example_3", 
            "text": "To call the mPDF method  SetHTMLFooter  you have to set the MODX system setting pdfresource.mPDFMethods  to  [ SetHTMLFooter ]  After that you have to create a MODX system setting  pdfresource.SetHTMLFooter \nand fill it with  [ div align='right' style='font-size: 8pt;' {PAGENO} /div div align='center' style='font-size: 8pt; font-style: italic;' hr My footer text. /div ]  or fill the  PDF Options  template variable of a resource with  {\n   SetHTMLFooter : [\n     div align='right' style='font-size: 8pt;' {PAGENO} /div div align='center' style='font-size: 8pt; font-style: italic;' hr My footer text. /div \n  ]\n}", 
            "title": "Example"
        }, 
        {
            "location": "/usage/#linking-to-a-generated-pdf", 
            "text": "All generated static PDF files are saved with the aliaspath of the generating\nresource. If you want to create a link to that PDF file, you could use the\nfollowing code:  a href= [[*id:pdfresourcelink]] PDF /a", 
            "title": "Linking to a generated PDF"
        }, 
        {
            "location": "/donate/", 
            "text": "Support PDFResource\n\n\nPDFResource\n is and always will be free and open-source, but it still requires\nmany man-hours of development, bug-fixing, support in MODX forums and on GitHub\nbetween the releases.\n\n\nPlease support the ongoing and past development of \nPDFResource\n by making a\ndonation below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPDFResource\n development is sponsored by Treehillstudio \u2013 MODX Development in M\u00fcnsterland.", 
            "title": "Donate"
        }, 
        {
            "location": "/donate/#support-pdfresource", 
            "text": "PDFResource  is and always will be free and open-source, but it still requires\nmany man-hours of development, bug-fixing, support in MODX forums and on GitHub\nbetween the releases.  Please support the ongoing and past development of  PDFResource  by making a\ndonation below.            PDFResource  development is sponsored by Treehillstudio \u2013 MODX Development in M\u00fcnsterland.", 
            "title": "Support PDFResource"
        }
    ]
}