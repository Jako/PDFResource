{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PDFResource","text":"<p>PDFResource is a MODX Revolution extra that converts resources to PDF files using mPDF.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>MODX Revolution 2.6+</li> <li>PHP 7.2+</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Create a static PDF file of a MODX resource with mPDF during saving or on viewing the resource.</li> <li>Create a PDF file of a MODX resource on the fly with mPDF.</li> <li>The options for the generated PDF could be set in MODX system settings and on resource base.</li> </ul>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the GPLv2 license.</p>"},{"location":"#translations","title":"Translations","text":"<p>Translations of the package can be made for the Default Lexicon and the System Setting Lexicon</p>"},{"location":"contributors/","title":"Contributors","text":"<p>The PDFResource project was started in 2015 by Thomas Jakobi.</p> <p>Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-modx-extras","title":"Install from MODX Extras","text":"<p>Search for PDFResource in the Package Manager of your MODX installation and install it in there.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>If you can't access the MODX Extras Repository in your MODX installation, you can manually install PDFResource.</p> <ul> <li>Download the transport package from MODX Extras (or one of the pre built transport packages in _packages)</li> <li>Upload the zip file to your MODX installation's <code>core/packages</code> folder or upload it manually in the MODX Package Manager.</li> <li>In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.</li> <li>PDFResource should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.</li> </ul>"},{"location":"installation/#build-it-from-source","title":"Build it from source","text":"<p>To build and install the package from source you could use Git Package Management. The GitHub repository of PDFResource contains a config.json to build that package locally. Use this option, if you want to debug PDFResource and/or contribute bugfixes and enhancements.</p> <p>After downloading the github repository, you have to change into the <code>core/components/pdfresource</code> folder and install mpdf with composer by invoking <code>composer install</code>.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#enable-the-pdf-generation","title":"Enable the PDF generation","text":"<p>PDFResource works out of the box and creates PDF files from all resources, that have the template variable <code>create_pdf</code> assigned (the template variable name could be changed in MODX system settings). The generated PDF files are saved with the current alias path to <code>{assets_url}/pdf/</code></p> <p>So after the installation you only have to assign the template variable <code>create_pdf</code> to the templates of the resources that should be converted to PDF and check that template variable in the resource (checked by default).</p>"},{"location":"usage/#pdf-generation-on-the-fly","title":"PDF generation on the fly","text":"<p>To generate PDF files on the fly with PDFResource you have to assign the template variable <code>live_pdf</code> to a template (the template variable name could be changed in MODX system settings) and check this template variable on a resource. After this, the resource will be rendered as PDF file in the browser. The file could be saved with the current alias.</p> <p>Caution</p> <p>This option should only be activated, if the content of the resource is dynamically changed. Generating the PDF is a quite resource consuming process and it could take some time.</p>"},{"location":"usage/#pdf-options","title":"PDF options","text":"<p>By default the PDF content and the CSS code for the PDF could be changed with the chunks <code>tplPDF</code> and <code>tplCSS</code>. Some other PDF options (pagesize, margins etc.) could be set in MODX system setting.</p> <p>PDFResource uses the following system settings in the namespace <code>pdfresource</code>:</p> Key Description Default Area PDF pdfresource.author Author of the PDF file <code>site_name</code> system setting pdfresource.creator Creator of the PDF file <code>site_url</code> system setting + <code>powered by PDFResource/mPDF</code> pdfresource.customFonts JSON encoded object of custom fonts, see Custom fonts for an example. Please copy the font files to the folder referenced in the <code>pdfresource.customFontsFolder</code> system setting. - pdfresource.customFontsFolder Path to the custom fonts folder. If the path is not set or available, <code>pdfresource.customFonts</code> is not used. The <code>{core_path}</code>, <code>{base_path}</code> and <code>{assets_path}</code> placeholders can be used in this setting. <code>{core_path}components/customfonts/</code> pdfresource.defaultFont Default font of the generated PDF - pdfresource.defaultFontSize Default font size of the generated PDF 0 pdfresource.format PDF page size. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L). A4 pdfresource.generateOnPrerender Generate not existing PDF files during OnWebPagePrerender. This option is useful, if you have installed PDFResource in an existing MODX installation. You don't have to save all resources that could generate a PDF file then. false pdfresource.mPDFMethods JSON encoded array of callable mPDF method names. [] pdfresource.mgb Bottom margin of the generated PDF 16 pdfresource.mgf Footer margin of the generated PDF 9 pdfresource.mgh Header margin of the generated PDF 9 pdfresource.mgl Bottom margin of the generated PDF 15 pdfresource.mgr Right margin of the generated PDF 15 pdfresource.mgt Top margin of the generated PDF 16 pdfresource.mode mPDF mode, see mode parameter and choosing a configuration in the mPDF documentation for possible values. - pdfresource.orientation PDF orientation. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L). P pdfresource.ownerPassword Password for full access and permissions to the generated PDF. - pdfresource.permissions JSON encoded array of permissions granted to the end-user of the PDF file. See permissions in the mPDF documentation for possible values. [] pdfresource.userPassword Password required to open the generated PDF. - Area Resource pdfresource.pdfTv Name ot the template variable that activates the PDF generation. create_pdf pdfresource.pdfTvLive Name of the template variable that activates the on the fly PDF generation. live_pdf pdfresource.pdfTvOptions Name of the template variable that change the options of the generated PDF. The content of this template variable has to contain a JSON encoded object of the options you want to change. pdf_options **Area System and Server ** pdfresource.debug Log debug information in the MODX error log. No **Area Template ** pdfresource.cssTpl Template chunk for the PDF style. You could use @FILE binding to retreive the chunk from a file. tplCSS pdfresource.pdfTpl Template chunk for the PDF content. You could use @FILE binding to retreive the chunk from a file. tplPDF pdfresource.processTVs Process template variables during PDF generation. Yes pdfresource.tvPrefix Template variable prefix in the template chunk. .tv"},{"location":"usage/#resource-based-pdf-options","title":"Resource based PDF options","text":"<p>All these options could be modified on resource base in a template variable <code>pdf_options</code> (the template variable name could be changed in MODX system settings). This template variable has to contain an JSON encoded object of options without the prefix <code>pdfresource.</code>.</p>"},{"location":"usage/#example","title":"Example","text":"<pre><code>{\n    \"format\": \"A4-L\",\n    \"mgl\": 20,\n    \"mgr\": 20\n}\n</code></pre>"},{"location":"usage/#pdf-content-template","title":"PDF content template","text":"<p>The content of the PDF is filled with the chunk defined by <code>pdfresource.pdfTpl</code> MODX system setting (or on resource base by the <code>pdf_options</code> template variable). By default PDFResource uses the <code>tplPDF</code> chunk. You could fill this chunk like a normal MODX template with resource placeholders, snippet calls etc. Since the PDF is not created on the fly, the content is fixed after saving the resource.</p>"},{"location":"usage/#pdf-styles-template","title":"PDF styles template","text":"<p>The style of the PDF is set with the chunk defined by <code>pdfresource.cssTpl</code> MODX system setting (or on resource base by the <code>pdf_options</code> template variable). By default PDFResource uses the <code>tplCSS</code> chunk. There are some limitations with mPDF and CSS (i.e. <code>position: absolute</code> works only with elements on root level).</p>"},{"location":"usage/#custom-fonts","title":"Custom fonts","text":"<p>To use custom fonts in your PDF files, you have to add them as JSON encoded object in the MODX system setting <code>pdfresource.customFonts</code>. See Fonts in the mPDF documentation a the full description.</p>"},{"location":"usage/#example_1","title":"Example","text":"<pre><code>{\n  \"frutiger\": {\n    \"R\": \"Frutiger-Normal.ttf\",\n    \"I\": \"FrutigerObl-Normal.ttf\"\n  }\n}\n</code></pre> <p>Please copy the font files to the folder referenced in the MODX system setting <code>pdfresource.customFontsFolder.</code> Before PDFResource version 2 they have to copied to {core_path}components/pdfresource/vendor/mpdf/mpdf/ttfonts/.</p>"},{"location":"usage/#pdf-permissions","title":"PDF permissions","text":"<p>The generated PDF could be encrypted to set user permissions. An user password to open the file and an owner password to bypass and/or change the permission restrictions could be set. The PDF encryption is enabled if the user or the owner password is set.</p> <p>A list of permissions could be found at permissions in the mPDF documentation. By default all permissions are denied if the file is encrypted.</p> <p>The following example JSON will grant copying and printing (low-res) to the end-user of the generated PDF.</p>"},{"location":"usage/#example_2","title":"Example","text":"<pre><code>[\"copy\", \"print\"]\n</code></pre>"},{"location":"usage/#other-mpdf-options","title":"Other mPDF options","text":"<p>If you want to set other mPDF options to modify the PDF file creation, you could call the mPDF class methods with callbacks.</p> <p>To use the callbacs, you first have to fill the MODX system setting <code>pdfresource.mPDFMethods</code> with an JSON encoded array of called method names. After that, you have to fill the according MODX system setting or (on resource base) an according key in <code>pdf_options</code> template variable. The method parameters have to be set by an JSON encoded array.</p>"},{"location":"usage/#example_3","title":"Example","text":"<p>To call the mPDF method <code>SetHTMLFooter</code> you have to set the MODX system setting <code>pdfresource.mPDFMethods</code> to</p> <pre><code>[\"SetHTMLFooter\"]\n</code></pre> <p>After that you have to create a MODX system setting <code>pdfresource.SetHTMLFooter</code> and fill it with</p> <pre><code>[\"&lt;div align='right' style='font-size: 8pt;'&gt;{PAGENO}&lt;/div&gt;&lt;div align='center' style='font-size: 8pt; font-style: italic;'&gt;&lt;hr&gt;My footer text.&lt;/div&gt;\"]\n</code></pre> <p>or fill the <code>PDF Options</code> template variable of a resource with</p> <pre><code>{\n  \"SetHTMLFooter\": [\n    \"&lt;div align='right' style='font-size: 8pt;'&gt;{PAGENO}&lt;/div&gt;&lt;div align='center' style='font-size: 8pt; font-style: italic;'&gt;&lt;hr&gt;My footer text.&lt;/div&gt;\"\n  ]\n}\n</code></pre>"},{"location":"usage/#linking-to-a-generated-pdf","title":"Linking to a generated PDF","text":"<p>All generated static PDF files are saved with the aliaspath of the generating resource. If you want to create a link to that PDF file, you could use the following code:</p> <pre><code>&lt;a href=\"[[*id:pdfresourcelink]]\"&gt;PDF&lt;/a&gt;\n</code></pre>"},{"location":"usage/#debug-htmlcss-output","title":"Debug HTML/CSS output","text":"<p>The pre-rendered HTML or CSS output handled by mPDF can be debugged with the <code>mode</code> url parameter. For this you have to enable the <code>pdfresource.debug</code> system setting and load the PDF generating resource with <code>mode=html</code> or <code>mode=css</code> as URL parameter. The result will be the HTML or CSS code that is handled by mPDF.</p> <p>That way you can identify wrong image paths etc. in this code. Don't forget to disable the <code>pdfresource.debug</code> system setting afterwards.</p>"}]}